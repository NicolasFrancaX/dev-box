" Init
" ------------------------------------

" Pathogen

call pathogen#infect()
call pathogen#helptags()
syntax enable
filetype plugin indent on

" Compatibility off, no one cares about bare Vi

set nocompatible
set modelines=0

" Theme
" ------------------------------------

colorscheme solarized

" Screen
" ------------------------------------

set number                        " show line numbers
set encoding=utf-8
set scrolloff=3                   " scroll should happen before cursor
                                  " reaches end of the screen
set autoindent
set showcmd                       " Show partial commands while
                                  " being typed
set hidden                        " Buffers should be hidden when
                                  " I left them, and I don't want Vi
                                  " complaining about it!
set wildmenu                      " Enhanced tab completion
set wildmode=list:longest         " on command insert
set ttyfast                       " Improve redrawing
set ruler                         " Show cursor position on last line
set backspace=indent,eol,start    " Backspace over anything
set laststatus=2                  " Always show status
set list                          " Show invisible chars
set listchars=tab:»\ ,trail:·
set colorcolumn=80                " Show ruler on column 80

" Vim temp files
" ------------------------------------

set backup                        " Backup is always nice"
set undofile                      " Undo available even after buffer close

set undolevels=1000               " Maximum number of changes that can be undone
set undoreload=10000              " Maximum number lines to save for undo on
                                  " a buffer reload

" folders to store temp files and avoid cluttering the current directory

set backupdir=~/.vimbackup//,/tmp
set directory=~/.vimswap//,/tmp
set viewdir=~/.vimviews//,/tmp
set undodir=~/.vimundos//,/tmp


" Create those directories if they don't exist already

silent execute '!mkdir -p ~/.vimbackup'
silent execute '!mkdir -p ~/.vimswap'
silent execute '!mkdir -p ~/.vimviews'
silent execute '!mkdir -p ~/.vimundos'

" Key remappings
" ------------------------------------

" <leader> is , instead of \

let mapleader = ","

" Map to avoid hold shift to every command

nnoremap ; :

" Disable arrow keys to enforce good habits

nnoremap <up>     <NOP>
nnoremap <down>   <NOP>
nnoremap <left>   <NOP>
nnoremap <right>  <NOP>
inoremap <up>     <NOP>
inoremap <down>   <NOP>
inoremap <left>   <NOP>
inoremap <right>  <NOP>

" Correct navigation on line wrap

nnoremap j gj
nnoremap k gk
nnoremap $ g$
nnoremap 0 g0

" Window navigation made easy

nnoremap <leader>w <C-w>v<C-w>l
nnoremap <leader>s <C-w>s<C-w>j
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Tab navigation made easy

nnoremap <S-l> :tabnext<cr>
nnoremap <S-h> :tabprev<cr>

" NERDTree shortcut

nnoremap <F9>      :NERDTreeToggle<cr><cr>
vnoremap <F9>      :NERDTreeToggle<cr><cr>
inoremap <F9> <ESC>:NERDTreeToggle<cr><cr>

" Ack shortcut

nnoremap <leader>a :Ack -i 

" Edit a write protected file after open

nnoremap <leader>W :w !sudo tee %<cr>

" Reference:
" http://www.commandlinefu.com/commands/view/1204/save-a-file-you-edited-in-vim-without-the-needed-permissions

" Spaces and Tabs
" ------------------------------------

" Define Stab to set tabstop, softtabstop and shiftwidth to the same value
command! -nargs=* Stab call Stab()
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  call SummarizeTabs()
endfunction

function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction
" Reference: http://vimcasts.org/episodes/tabs-and-spaces/

" Remove trailing spaces with F5

function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<CR>
" Reference: http://vimcasts.org/episodes/tidying-whitespace/

set ts=2 sts=2 sw=2 expandtab     " Default spaces

" Spaces for filetypes

autocmd FileType html      setlocal sts=4 sts=4 sw=4 expandtab
autocmd FileType php       setlocal sts=4 sts=4 sw=4 expandtab
autocmd FileType makefile  setlocal sts=4 sts=4 sw=4 noexpandtab
autocmd FileType markdown  setlocal sts=4 sts=4 sw=4 expandtab
autocmd FileType java      setlocal sts=4 sts=4 sw=4 expandtab
autocmd FileType python    setlocal sts=4 sts=4 sw=4 expandtab


" Search
" ------------------------------------

" Use perl compatible mode

nnoremap / /\v
vnoremap / /\v
set ignorecase        " Case insensitive by default
set smartcase         " If there's one upcase letter, case sensitive
                      " search is desired
set gdefault          " Global replace by default
set incsearch         " Search while typing
set showmatch         " Quickly point to the matching bracket when closing
set hlsearch          " Highlight search

" Clear highlight shortcut

nnoremap <leader><space> :noh<cr>

" GIT
" ------------------------------------

" auto-clean buffers

autocmd BufReadPost fugitive://* set bufhidden=delete

" Taglist
" ------------------------------------

let Tlist_Ctags_Cmd = "/usr/bin/ctags-exuberant"
let Tlist_WinWidth = 50
map <F4> :TlistToggle<cr>

" Copy and paste to system clipboard
" ------------------------------------

set clipboard=unnamedplus

" Toggle paste mode

set pastetoggle=<F2>

" Buffer-explorer
" ------------------------------------

nnoremap <F3>      :BufExplorer<cr>
vnoremap <F3> <ESC>:BufExplorer<cr>
inoremap <F3> <ESC>:BufExplorer<cr>

" Tabular
" ------------------------------------

nnoremap <leader>== :Tabularize/=<cr>
vnoremap <leader>== :Tabularize/=<cr>
nnoremap <leader>=: :Tabularize/:<cr>
vnoremap <leader>=: :Tabularize/:<cr>


" PowerLine
" ------------------------------------

" make it prettier

let g:Powerline_symbols     = 'fancy'
let g:Powerline_colorscheme = 'solarizedLight'

" Vimux
" ------------------------------------

" Mappings

" Run the current file with rspec
map <leader>rb :call RunVimTmuxCommand("clear; rspec " . bufname("%"))<CR>
" Prompt for a command to run
map <leader>rp :PromptVimTmuxCommand<CR>
" Run last command executed by RunVimTmuxCommand
map <leader>rl :RunLastVimTmuxCommand<CR>
" Inspect runner pane
map <leader>ri :InspectVimTmuxRunner<CR>
" Close all other tmux panes in current window
map <leader>rx :CloseVimTmuxPanes<CR>
" Interrupt any command running in the runner pane
map <leader>rS :InterruptVimTmuxRunner<CR>
" If text is selected, save it in the v buffer and send that buffer it to tmux
vmap <leader>rs "vy :call RunVimTmuxCommand(@v)<CR>

" Settings

" Use nearest pane (not used by vim) if found instead of running split-window
let VimuxUseNearestPane = 1

" ShowMarks
" ------------------------------------

" Make it appear

hi default ShowMarksHLl ctermfg=green ctermbg=blue cterm=bold guifg=green guibg=blue gui=bold
hi default ShowMarksHLu ctermfg=green ctermbg=blue cterm=bold guifg=green guibg=blue gui=bold
hi default ShowMarksHLo ctermfg=green ctermbg=blue cterm=bold guifg=green guibg=blue gui=bold
hi default ShowMarksHLm ctermfg=green ctermbg=blue cterm=bold guifg=green guibg=blue gui=bold

" Disable on startup

let g:showmarks_enable=0
